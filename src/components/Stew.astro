---
import { formatCurrency } from "@/utils";

interface Props {
  title: string;
  href: string;
  img: string;
  priceKilogram: number;
  priceHalfKilogram: number;
  priceQuarterKilogram: number;
  available: boolean;
};

const { title, href, img, priceKilogram, priceHalfKilogram, priceQuarterKilogram, available } = Astro.props;

---
<div class="grid grid-rows-[120px_1fr]">
  <div class="flex w-48 justify-center m-auto -rotate-12 translate-y-1">
    <a 
      class="w-full h-full"
      href={href}
      transition:name=`media-image-${href}`
    >
      <img
        class={`w-full h-full object-contain transition-all duration-300 ease-in-out hover:rotate-12 ${available ? 'grayscale-0' : 'grayscale'}`}
        src={img}
        alt={title}
        loading="lazy"
      />
      {!available && (
        <div class="absolute inset-0 bg-opacity-50 flex items-center justify-center">
          <p class="text-white font-semibold text-md">No disponible</p>
        </div>
      )}
    </a>
  </div>
  <a href={href} class="bg-blue flex flex-col gap-2 items-center justify-end h-52 rounded-3xl p-4 pt-6">
    <p class="text-white text-lg text-center inline-block hover:underline">
      {title.toLocaleUpperCase()}
    </p>
    <div class="flex gap-4 p-4 rounded-lg">
      {priceKilogram !== 0 && (
        <p class="bg-blue-light p-2 rounded-md text-white font-semibold text-lg text-center">
          {formatCurrency(priceKilogram)}/kg
        </p>
      )}
      <div>
        {priceHalfKilogram !== 0 && (
          <p class="bg-blue-light p-2 rounded-md text-white font-semibold text-lg text-center">
            {formatCurrency(priceHalfKilogram)}/500g
          </p>
        )}
        {priceQuarterKilogram !== 0 && (
          <p class="bg-blue-light p-2 rounded-md text-white font-semibold text-lg text-center">
            {formatCurrency(priceQuarterKilogram)}/250g
          </p>
        )}
      </div>
    </div>
  </a>
</div>
